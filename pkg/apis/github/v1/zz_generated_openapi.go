// +build !ignore_autogenerated

/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/appvia/hub-apis/pkg/apis/github/v1.Organization":       schema_pkg_apis_github_v1_Organization(ref),
		"github.com/appvia/hub-apis/pkg/apis/github/v1.OrganizationSpec":   schema_pkg_apis_github_v1_OrganizationSpec(ref),
		"github.com/appvia/hub-apis/pkg/apis/github/v1.OrganizationStatus": schema_pkg_apis_github_v1_OrganizationStatus(ref),
	}
}

func schema_pkg_apis_github_v1_Organization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Organization is the Schema for the teams API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/hub-apis/pkg/apis/github/v1.OrganizationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/hub-apis/pkg/apis/github/v1.OrganizationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/hub-apis/pkg/apis/github/v1.OrganizationSpec", "github.com/appvia/hub-apis/pkg/apis/github/v1.OrganizationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_github_v1_OrganizationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrganizationSpec defines the desired state of Organization",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the github organization.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"applicationID": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplicationID is the github application id.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"applicationPrivateKey": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplicationPrivateKey is the generate private key for the Github application.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"applicationInstallID": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplicationInstallID is the installation id of the Github application.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"applicationClientID": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplicationClientID is the application client id for the installed application.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"applicationClientSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplicationClientSecret is the application client secret from the installed applicaton.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "applicationID", "applicationPrivateKey", "applicationInstallID", "applicationClientID", "applicationClientSecret"},
			},
		},
	}
}

func schema_pkg_apis_github_v1_OrganizationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrganizationStatus defines the observed state of Organization",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a collection of possible errors",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/hub-apis/pkg/apis/core/v1.Condition"),
									},
								},
							},
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status is the status of the resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"conditions", "status"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/hub-apis/pkg/apis/core/v1.Condition"},
	}
}
