/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/gambol99/hub-apis/pkg/apis/clusters/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterCredentialLister helps list ClusterCredentials.
type ClusterCredentialLister interface {
	// List lists all ClusterCredentials in the indexer.
	List(selector labels.Selector) (ret []*v1.ClusterCredential, err error)
	// ClusterCredentials returns an object that can list and get ClusterCredentials.
	ClusterCredentials(namespace string) ClusterCredentialNamespaceLister
	ClusterCredentialListerExpansion
}

// clusterCredentialLister implements the ClusterCredentialLister interface.
type clusterCredentialLister struct {
	indexer cache.Indexer
}

// NewClusterCredentialLister returns a new ClusterCredentialLister.
func NewClusterCredentialLister(indexer cache.Indexer) ClusterCredentialLister {
	return &clusterCredentialLister{indexer: indexer}
}

// List lists all ClusterCredentials in the indexer.
func (s *clusterCredentialLister) List(selector labels.Selector) (ret []*v1.ClusterCredential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterCredential))
	})
	return ret, err
}

// ClusterCredentials returns an object that can list and get ClusterCredentials.
func (s *clusterCredentialLister) ClusterCredentials(namespace string) ClusterCredentialNamespaceLister {
	return clusterCredentialNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterCredentialNamespaceLister helps list and get ClusterCredentials.
type ClusterCredentialNamespaceLister interface {
	// List lists all ClusterCredentials in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ClusterCredential, err error)
	// Get retrieves the ClusterCredential from the indexer for a given namespace and name.
	Get(name string) (*v1.ClusterCredential, error)
	ClusterCredentialNamespaceListerExpansion
}

// clusterCredentialNamespaceLister implements the ClusterCredentialNamespaceLister
// interface.
type clusterCredentialNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterCredentials in the indexer for a given namespace.
func (s clusterCredentialNamespaceLister) List(selector labels.Selector) (ret []*v1.ClusterCredential, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterCredential))
	})
	return ret, err
}

// Get retrieves the ClusterCredential from the indexer for a given namespace and name.
func (s clusterCredentialNamespaceLister) Get(name string) (*v1.ClusterCredential, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clustercredential"), name)
	}
	return obj.(*v1.ClusterCredential), nil
}
