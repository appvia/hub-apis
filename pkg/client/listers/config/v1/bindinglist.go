/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/appvia/hub-apis/pkg/apis/config/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BindingListLister helps list BindingLists.
type BindingListLister interface {
	// List lists all BindingLists in the indexer.
	List(selector labels.Selector) (ret []*v1.BindingList, err error)
	// BindingLists returns an object that can list and get BindingLists.
	BindingLists(namespace string) BindingListNamespaceLister
	BindingListListerExpansion
}

// bindingListLister implements the BindingListLister interface.
type bindingListLister struct {
	indexer cache.Indexer
}

// NewBindingListLister returns a new BindingListLister.
func NewBindingListLister(indexer cache.Indexer) BindingListLister {
	return &bindingListLister{indexer: indexer}
}

// List lists all BindingLists in the indexer.
func (s *bindingListLister) List(selector labels.Selector) (ret []*v1.BindingList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BindingList))
	})
	return ret, err
}

// BindingLists returns an object that can list and get BindingLists.
func (s *bindingListLister) BindingLists(namespace string) BindingListNamespaceLister {
	return bindingListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BindingListNamespaceLister helps list and get BindingLists.
type BindingListNamespaceLister interface {
	// List lists all BindingLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.BindingList, err error)
	// Get retrieves the BindingList from the indexer for a given namespace and name.
	Get(name string) (*v1.BindingList, error)
	BindingListNamespaceListerExpansion
}

// bindingListNamespaceLister implements the BindingListNamespaceLister
// interface.
type bindingListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BindingLists in the indexer for a given namespace.
func (s bindingListNamespaceLister) List(selector labels.Selector) (ret []*v1.BindingList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BindingList))
	})
	return ret, err
}

// Get retrieves the BindingList from the indexer for a given namespace and name.
func (s bindingListNamespaceLister) Get(name string) (*v1.BindingList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("bindinglist"), name)
	}
	return obj.(*v1.BindingList), nil
}
