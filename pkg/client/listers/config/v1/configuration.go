/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/appvia/hub-apis/pkg/apis/config/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationLister helps list Configurations.
type ConfigurationLister interface {
	// List lists all Configurations in the indexer.
	List(selector labels.Selector) (ret []*v1.Configuration, err error)
	// Get retrieves the Configuration from the index for a given name.
	Get(name string) (*v1.Configuration, error)
	ConfigurationListerExpansion
}

// configurationLister implements the ConfigurationLister interface.
type configurationLister struct {
	indexer cache.Indexer
}

// NewConfigurationLister returns a new ConfigurationLister.
func NewConfigurationLister(indexer cache.Indexer) ConfigurationLister {
	return &configurationLister{indexer: indexer}
}

// List lists all Configurations in the indexer.
func (s *configurationLister) List(selector labels.Selector) (ret []*v1.Configuration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Configuration))
	})
	return ret, err
}

// Get retrieves the Configuration from the index for a given name.
func (s *configurationLister) Get(name string) (*v1.Configuration, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("configuration"), name)
	}
	return obj.(*v1.Configuration), nil
}
