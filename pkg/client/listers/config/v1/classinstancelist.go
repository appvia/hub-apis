/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/appvia/hub-apis/pkg/apis/config/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClassInstanceListLister helps list ClassInstanceLists.
type ClassInstanceListLister interface {
	// List lists all ClassInstanceLists in the indexer.
	List(selector labels.Selector) (ret []*v1.ClassInstanceList, err error)
	// ClassInstanceLists returns an object that can list and get ClassInstanceLists.
	ClassInstanceLists(namespace string) ClassInstanceListNamespaceLister
	ClassInstanceListListerExpansion
}

// classInstanceListLister implements the ClassInstanceListLister interface.
type classInstanceListLister struct {
	indexer cache.Indexer
}

// NewClassInstanceListLister returns a new ClassInstanceListLister.
func NewClassInstanceListLister(indexer cache.Indexer) ClassInstanceListLister {
	return &classInstanceListLister{indexer: indexer}
}

// List lists all ClassInstanceLists in the indexer.
func (s *classInstanceListLister) List(selector labels.Selector) (ret []*v1.ClassInstanceList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClassInstanceList))
	})
	return ret, err
}

// ClassInstanceLists returns an object that can list and get ClassInstanceLists.
func (s *classInstanceListLister) ClassInstanceLists(namespace string) ClassInstanceListNamespaceLister {
	return classInstanceListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClassInstanceListNamespaceLister helps list and get ClassInstanceLists.
type ClassInstanceListNamespaceLister interface {
	// List lists all ClassInstanceLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ClassInstanceList, err error)
	// Get retrieves the ClassInstanceList from the indexer for a given namespace and name.
	Get(name string) (*v1.ClassInstanceList, error)
	ClassInstanceListNamespaceListerExpansion
}

// classInstanceListNamespaceLister implements the ClassInstanceListNamespaceLister
// interface.
type classInstanceListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClassInstanceLists in the indexer for a given namespace.
func (s classInstanceListNamespaceLister) List(selector labels.Selector) (ret []*v1.ClassInstanceList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClassInstanceList))
	})
	return ret, err
}

// Get retrieves the ClassInstanceList from the indexer for a given namespace and name.
func (s classInstanceListNamespaceLister) Get(name string) (*v1.ClassInstanceList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("classinstancelist"), name)
	}
	return obj.(*v1.ClassInstanceList), nil
}
