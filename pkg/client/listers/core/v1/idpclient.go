/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/appvia/hub-apis/pkg/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IDPClientLister helps list IDPClients.
type IDPClientLister interface {
	// List lists all IDPClients in the indexer.
	List(selector labels.Selector) (ret []*v1.IDPClient, err error)
	// IDPClients returns an object that can list and get IDPClients.
	IDPClients(namespace string) IDPClientNamespaceLister
	IDPClientListerExpansion
}

// iDPClientLister implements the IDPClientLister interface.
type iDPClientLister struct {
	indexer cache.Indexer
}

// NewIDPClientLister returns a new IDPClientLister.
func NewIDPClientLister(indexer cache.Indexer) IDPClientLister {
	return &iDPClientLister{indexer: indexer}
}

// List lists all IDPClients in the indexer.
func (s *iDPClientLister) List(selector labels.Selector) (ret []*v1.IDPClient, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IDPClient))
	})
	return ret, err
}

// IDPClients returns an object that can list and get IDPClients.
func (s *iDPClientLister) IDPClients(namespace string) IDPClientNamespaceLister {
	return iDPClientNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IDPClientNamespaceLister helps list and get IDPClients.
type IDPClientNamespaceLister interface {
	// List lists all IDPClients in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.IDPClient, err error)
	// Get retrieves the IDPClient from the indexer for a given namespace and name.
	Get(name string) (*v1.IDPClient, error)
	IDPClientNamespaceListerExpansion
}

// iDPClientNamespaceLister implements the IDPClientNamespaceLister
// interface.
type iDPClientNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IDPClients in the indexer for a given namespace.
func (s iDPClientNamespaceLister) List(selector labels.Selector) (ret []*v1.IDPClient, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IDPClient))
	})
	return ret, err
}

// Get retrieves the IDPClient from the indexer for a given namespace and name.
func (s iDPClientNamespaceLister) Get(name string) (*v1.IDPClient, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("idpclient"), name)
	}
	return obj.(*v1.IDPClient), nil
}
