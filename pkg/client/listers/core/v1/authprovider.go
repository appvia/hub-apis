/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/appvia/hub-apis/pkg/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthProviderLister helps list AuthProviders.
type AuthProviderLister interface {
	// List lists all AuthProviders in the indexer.
	List(selector labels.Selector) (ret []*v1.AuthProvider, err error)
	// AuthProviders returns an object that can list and get AuthProviders.
	AuthProviders(namespace string) AuthProviderNamespaceLister
	AuthProviderListerExpansion
}

// authProviderLister implements the AuthProviderLister interface.
type authProviderLister struct {
	indexer cache.Indexer
}

// NewAuthProviderLister returns a new AuthProviderLister.
func NewAuthProviderLister(indexer cache.Indexer) AuthProviderLister {
	return &authProviderLister{indexer: indexer}
}

// List lists all AuthProviders in the indexer.
func (s *authProviderLister) List(selector labels.Selector) (ret []*v1.AuthProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AuthProvider))
	})
	return ret, err
}

// AuthProviders returns an object that can list and get AuthProviders.
func (s *authProviderLister) AuthProviders(namespace string) AuthProviderNamespaceLister {
	return authProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthProviderNamespaceLister helps list and get AuthProviders.
type AuthProviderNamespaceLister interface {
	// List lists all AuthProviders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AuthProvider, err error)
	// Get retrieves the AuthProvider from the indexer for a given namespace and name.
	Get(name string) (*v1.AuthProvider, error)
	AuthProviderNamespaceListerExpansion
}

// authProviderNamespaceLister implements the AuthProviderNamespaceLister
// interface.
type authProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthProviders in the indexer for a given namespace.
func (s authProviderNamespaceLister) List(selector labels.Selector) (ret []*v1.AuthProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AuthProvider))
	})
	return ret, err
}

// Get retrieves the AuthProvider from the indexer for a given namespace and name.
func (s authProviderNamespaceLister) Get(name string) (*v1.AuthProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("authprovider"), name)
	}
	return obj.(*v1.AuthProvider), nil
}
