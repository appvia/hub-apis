/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/appvia/hub-apis/pkg/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IDPLister helps list IDPs.
type IDPLister interface {
	// List lists all IDPs in the indexer.
	List(selector labels.Selector) (ret []*v1.IDP, err error)
	// IDPs returns an object that can list and get IDPs.
	IDPs(namespace string) IDPNamespaceLister
	IDPListerExpansion
}

// iDPLister implements the IDPLister interface.
type iDPLister struct {
	indexer cache.Indexer
}

// NewIDPLister returns a new IDPLister.
func NewIDPLister(indexer cache.Indexer) IDPLister {
	return &iDPLister{indexer: indexer}
}

// List lists all IDPs in the indexer.
func (s *iDPLister) List(selector labels.Selector) (ret []*v1.IDP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IDP))
	})
	return ret, err
}

// IDPs returns an object that can list and get IDPs.
func (s *iDPLister) IDPs(namespace string) IDPNamespaceLister {
	return iDPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IDPNamespaceLister helps list and get IDPs.
type IDPNamespaceLister interface {
	// List lists all IDPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.IDP, err error)
	// Get retrieves the IDP from the indexer for a given namespace and name.
	Get(name string) (*v1.IDP, error)
	IDPNamespaceListerExpansion
}

// iDPNamespaceLister implements the IDPNamespaceLister
// interface.
type iDPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IDPs in the indexer for a given namespace.
func (s iDPNamespaceLister) List(selector labels.Selector) (ret []*v1.IDP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IDP))
	})
	return ret, err
}

// Get retrieves the IDP from the indexer for a given namespace and name.
func (s iDPNamespaceLister) Get(name string) (*v1.IDP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("idp"), name)
	}
	return obj.(*v1.IDP), nil
}
