/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	clustersv1 "github.com/appvia/hub-apis/pkg/client/clientset/versioned/typed/clusters/v1"
	configv1 "github.com/appvia/hub-apis/pkg/client/clientset/versioned/typed/config/v1"
	corev1 "github.com/appvia/hub-apis/pkg/client/clientset/versioned/typed/core/v1"
	orgv1 "github.com/appvia/hub-apis/pkg/client/clientset/versioned/typed/org/v1"
	rbacv1 "github.com/appvia/hub-apis/pkg/client/clientset/versioned/typed/rbac/v1"
	storev1 "github.com/appvia/hub-apis/pkg/client/clientset/versioned/typed/store/v1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ClustersV1() clustersv1.ClustersV1Interface
	ConfigV1() configv1.ConfigV1Interface
	CoreV1() corev1.CoreV1Interface
	OrgV1() orgv1.OrgV1Interface
	RbacV1() rbacv1.RbacV1Interface
	StoreV1() storev1.StoreV1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	clustersV1 *clustersv1.ClustersV1Client
	configV1   *configv1.ConfigV1Client
	coreV1     *corev1.CoreV1Client
	orgV1      *orgv1.OrgV1Client
	rbacV1     *rbacv1.RbacV1Client
	storeV1    *storev1.StoreV1Client
}

// ClustersV1 retrieves the ClustersV1Client
func (c *Clientset) ClustersV1() clustersv1.ClustersV1Interface {
	return c.clustersV1
}

// ConfigV1 retrieves the ConfigV1Client
func (c *Clientset) ConfigV1() configv1.ConfigV1Interface {
	return c.configV1
}

// CoreV1 retrieves the CoreV1Client
func (c *Clientset) CoreV1() corev1.CoreV1Interface {
	return c.coreV1
}

// OrgV1 retrieves the OrgV1Client
func (c *Clientset) OrgV1() orgv1.OrgV1Interface {
	return c.orgV1
}

// RbacV1 retrieves the RbacV1Client
func (c *Clientset) RbacV1() rbacv1.RbacV1Interface {
	return c.rbacV1
}

// StoreV1 retrieves the StoreV1Client
func (c *Clientset) StoreV1() storev1.StoreV1Interface {
	return c.storeV1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.clustersV1, err = clustersv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.configV1, err = configv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.coreV1, err = corev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.orgV1, err = orgv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.rbacV1, err = rbacv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.storeV1, err = storev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.clustersV1 = clustersv1.NewForConfigOrDie(c)
	cs.configV1 = configv1.NewForConfigOrDie(c)
	cs.coreV1 = corev1.NewForConfigOrDie(c)
	cs.orgV1 = orgv1.NewForConfigOrDie(c)
	cs.rbacV1 = rbacv1.NewForConfigOrDie(c)
	cs.storeV1 = storev1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.clustersV1 = clustersv1.New(c)
	cs.configV1 = configv1.New(c)
	cs.coreV1 = corev1.New(c)
	cs.orgV1 = orgv1.New(c)
	cs.rbacV1 = rbacv1.New(c)
	cs.storeV1 = storev1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
