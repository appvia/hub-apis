/*
Copyright 2019 Rohith Jayawardene <info@appvia.io>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/appvia/hub-apis/pkg/apis/config/v1"
	scheme "github.com/appvia/hub-apis/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ClassInstanceListsGetter has a method to return a ClassInstanceListInterface.
// A group's client should implement this interface.
type ClassInstanceListsGetter interface {
	ClassInstanceLists(namespace string) ClassInstanceListInterface
}

// ClassInstanceListInterface has methods to work with ClassInstanceList resources.
type ClassInstanceListInterface interface {
	Create(*v1.ClassInstanceList) (*v1.ClassInstanceList, error)
	Update(*v1.ClassInstanceList) (*v1.ClassInstanceList, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ClassInstanceList, error)
	List(opts metav1.ListOptions) (*v1.ClassInstanceListList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ClassInstanceList, err error)
	ClassInstanceListExpansion
}

// classInstanceLists implements ClassInstanceListInterface
type classInstanceLists struct {
	client rest.Interface
	ns     string
}

// newClassInstanceLists returns a ClassInstanceLists
func newClassInstanceLists(c *ConfigV1Client, namespace string) *classInstanceLists {
	return &classInstanceLists{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the classInstanceList, and returns the corresponding classInstanceList object, and an error if there is any.
func (c *classInstanceLists) Get(name string, options metav1.GetOptions) (result *v1.ClassInstanceList, err error) {
	result = &v1.ClassInstanceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("classinstancelists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ClassInstanceLists that match those selectors.
func (c *classInstanceLists) List(opts metav1.ListOptions) (result *v1.ClassInstanceListList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ClassInstanceListList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("classinstancelists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested classInstanceLists.
func (c *classInstanceLists) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("classinstancelists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a classInstanceList and creates it.  Returns the server's representation of the classInstanceList, and an error, if there is any.
func (c *classInstanceLists) Create(classInstanceList *v1.ClassInstanceList) (result *v1.ClassInstanceList, err error) {
	result = &v1.ClassInstanceList{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("classinstancelists").
		Body(classInstanceList).
		Do().
		Into(result)
	return
}

// Update takes the representation of a classInstanceList and updates it. Returns the server's representation of the classInstanceList, and an error, if there is any.
func (c *classInstanceLists) Update(classInstanceList *v1.ClassInstanceList) (result *v1.ClassInstanceList, err error) {
	result = &v1.ClassInstanceList{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("classinstancelists").
		Name(classInstanceList.Name).
		Body(classInstanceList).
		Do().
		Into(result)
	return
}

// Delete takes name of the classInstanceList and deletes it. Returns an error if one occurs.
func (c *classInstanceLists) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("classinstancelists").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *classInstanceLists) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("classinstancelists").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched classInstanceList.
func (c *classInstanceLists) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ClassInstanceList, err error) {
	result = &v1.ClassInstanceList{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("classinstancelists").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
